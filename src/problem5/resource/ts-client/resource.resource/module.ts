// Generated by Ignite ignite.com/cli

import { SigningStargateClient, DeliverTxResponse, StdFee } from "@cosmjs/stargate";
import { EncodeObject, GeneratedType, OfflineSigner, Registry } from "@cosmjs/proto-signing";
import { msgTypes } from './registry';
import { IgniteClient } from "../client"
import { MissingWalletError } from "../helpers"
import { Api } from "./rest";
import { QueryAllFarmResponse } from "./types/resource/resource/query";
import { MsgUpdateFarmResponse } from "./types/resource/resource/tx";
import { MsgCreateFarm } from "./types/resource/resource/tx";
import { Params } from "./types/resource/resource/params";
import { QueryAllFarmRequest } from "./types/resource/resource/query";
import { MsgUpdateParams } from "./types/resource/resource/tx";
import { MsgDeleteFarm } from "./types/resource/resource/tx";
import { QueryParamsRequest } from "./types/resource/resource/query";
import { QueryParamsResponse } from "./types/resource/resource/query";
import { QueryGetFarmResponse } from "./types/resource/resource/query";
import { MsgDeleteFarmResponse } from "./types/resource/resource/tx";
import { MsgUpdateFarm } from "./types/resource/resource/tx";
import { Farm } from "./types/resource/resource/farm";
import { GenesisState } from "./types/resource/resource/genesis";
import { QueryGetFarmRequest } from "./types/resource/resource/query";
import { MsgUpdateParamsResponse } from "./types/resource/resource/tx";
import { MsgCreateFarmResponse } from "./types/resource/resource/tx";


export { QueryAllFarmResponse, MsgUpdateFarmResponse, MsgCreateFarm, Params, QueryAllFarmRequest, MsgUpdateParams, MsgDeleteFarm, QueryParamsRequest, QueryParamsResponse, QueryGetFarmResponse, MsgDeleteFarmResponse, MsgUpdateFarm, Farm, GenesisState, QueryGetFarmRequest, MsgUpdateParamsResponse, MsgCreateFarmResponse };

type sendQueryAllFarmResponseParams = {
  value: QueryAllFarmResponse,
  fee?: StdFee,
  memo?: string
};

type sendMsgUpdateFarmResponseParams = {
  value: MsgUpdateFarmResponse,
  fee?: StdFee,
  memo?: string
};

type sendMsgCreateFarmParams = {
  value: MsgCreateFarm,
  fee?: StdFee,
  memo?: string
};

type sendParamsParams = {
  value: Params,
  fee?: StdFee,
  memo?: string
};

type sendQueryAllFarmRequestParams = {
  value: QueryAllFarmRequest,
  fee?: StdFee,
  memo?: string
};

type sendMsgUpdateParamsParams = {
  value: MsgUpdateParams,
  fee?: StdFee,
  memo?: string
};

type sendMsgDeleteFarmParams = {
  value: MsgDeleteFarm,
  fee?: StdFee,
  memo?: string
};

type sendQueryParamsRequestParams = {
  value: QueryParamsRequest,
  fee?: StdFee,
  memo?: string
};

type sendQueryParamsResponseParams = {
  value: QueryParamsResponse,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetFarmResponseParams = {
  value: QueryGetFarmResponse,
  fee?: StdFee,
  memo?: string
};

type sendMsgDeleteFarmResponseParams = {
  value: MsgDeleteFarmResponse,
  fee?: StdFee,
  memo?: string
};

type sendMsgUpdateFarmParams = {
  value: MsgUpdateFarm,
  fee?: StdFee,
  memo?: string
};

type sendFarmParams = {
  value: Farm,
  fee?: StdFee,
  memo?: string
};

type sendGenesisStateParams = {
  value: GenesisState,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetFarmRequestParams = {
  value: QueryGetFarmRequest,
  fee?: StdFee,
  memo?: string
};

type sendMsgUpdateParamsResponseParams = {
  value: MsgUpdateParamsResponse,
  fee?: StdFee,
  memo?: string
};

type sendMsgCreateFarmResponseParams = {
  value: MsgCreateFarmResponse,
  fee?: StdFee,
  memo?: string
};


type queryAllFarmResponseParams = {
  value: QueryAllFarmResponse,
};

type msgUpdateFarmResponseParams = {
  value: MsgUpdateFarmResponse,
};

type msgCreateFarmParams = {
  value: MsgCreateFarm,
};

type paramsParams = {
  value: Params,
};

type queryAllFarmRequestParams = {
  value: QueryAllFarmRequest,
};

type msgUpdateParamsParams = {
  value: MsgUpdateParams,
};

type msgDeleteFarmParams = {
  value: MsgDeleteFarm,
};

type queryParamsRequestParams = {
  value: QueryParamsRequest,
};

type queryParamsResponseParams = {
  value: QueryParamsResponse,
};

type queryGetFarmResponseParams = {
  value: QueryGetFarmResponse,
};

type msgDeleteFarmResponseParams = {
  value: MsgDeleteFarmResponse,
};

type msgUpdateFarmParams = {
  value: MsgUpdateFarm,
};

type farmParams = {
  value: Farm,
};

type genesisStateParams = {
  value: GenesisState,
};

type queryGetFarmRequestParams = {
  value: QueryGetFarmRequest,
};

type msgUpdateParamsResponseParams = {
  value: MsgUpdateParamsResponse,
};

type msgCreateFarmResponseParams = {
  value: MsgCreateFarmResponse,
};


export const registry = new Registry(msgTypes);

type Field = {
	name: string;
	type: unknown;
}
function getStructure(template) {
	const structure: {fields: Field[]} = { fields: [] }
	for (let [key, value] of Object.entries(template)) {
		let field = { name: key, type: typeof value }
		structure.fields.push(field)
	}
	return structure
}
const defaultFee = {
  amount: [],
  gas: "200000",
};

interface TxClientOptions {
  addr: string
	prefix: string
	signer?: OfflineSigner
}

export const txClient = ({ signer, prefix, addr }: TxClientOptions = { addr: "http://localhost:26657", prefix: "cosmos" }) => {

  return {
		
		async sendQueryAllFarmResponse({ value, fee, memo }: sendQueryAllFarmResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryAllFarmResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryAllFarmResponse({ value: QueryAllFarmResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryAllFarmResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUpdateFarmResponse({ value, fee, memo }: sendMsgUpdateFarmResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateFarmResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgUpdateFarmResponse({ value: MsgUpdateFarmResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateFarmResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgCreateFarm({ value, fee, memo }: sendMsgCreateFarmParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCreateFarm: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgCreateFarm({ value: MsgCreateFarm.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCreateFarm: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendParams({ value, fee, memo }: sendParamsParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendParams: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.params({ value: Params.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendParams: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryAllFarmRequest({ value, fee, memo }: sendQueryAllFarmRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryAllFarmRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryAllFarmRequest({ value: QueryAllFarmRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryAllFarmRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUpdateParams({ value, fee, memo }: sendMsgUpdateParamsParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateParams: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgUpdateParams({ value: MsgUpdateParams.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateParams: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgDeleteFarm({ value, fee, memo }: sendMsgDeleteFarmParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgDeleteFarm: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgDeleteFarm({ value: MsgDeleteFarm.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgDeleteFarm: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryParamsRequest({ value, fee, memo }: sendQueryParamsRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryParamsRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryParamsRequest({ value: QueryParamsRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryParamsRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryParamsResponse({ value, fee, memo }: sendQueryParamsResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryParamsResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryParamsResponse({ value: QueryParamsResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryParamsResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetFarmResponse({ value, fee, memo }: sendQueryGetFarmResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetFarmResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetFarmResponse({ value: QueryGetFarmResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetFarmResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgDeleteFarmResponse({ value, fee, memo }: sendMsgDeleteFarmResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgDeleteFarmResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgDeleteFarmResponse({ value: MsgDeleteFarmResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgDeleteFarmResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUpdateFarm({ value, fee, memo }: sendMsgUpdateFarmParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateFarm: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgUpdateFarm({ value: MsgUpdateFarm.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateFarm: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendFarm({ value, fee, memo }: sendFarmParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendFarm: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.farm({ value: Farm.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendFarm: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendGenesisState({ value, fee, memo }: sendGenesisStateParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendGenesisState: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.genesisState({ value: GenesisState.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendGenesisState: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetFarmRequest({ value, fee, memo }: sendQueryGetFarmRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetFarmRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetFarmRequest({ value: QueryGetFarmRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetFarmRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUpdateParamsResponse({ value, fee, memo }: sendMsgUpdateParamsResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateParamsResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgUpdateParamsResponse({ value: MsgUpdateParamsResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateParamsResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgCreateFarmResponse({ value, fee, memo }: sendMsgCreateFarmResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCreateFarmResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgCreateFarmResponse({ value: MsgCreateFarmResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCreateFarmResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		
		queryAllFarmResponse({ value }: queryAllFarmResponseParams): EncodeObject {
			try {
				return { typeUrl: "/resource.resource.QueryAllFarmResponse", value: QueryAllFarmResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryAllFarmResponse: Could not create message: ' + e.message)
			}
		},
		
		msgUpdateFarmResponse({ value }: msgUpdateFarmResponseParams): EncodeObject {
			try {
				return { typeUrl: "/resource.resource.MsgUpdateFarmResponse", value: MsgUpdateFarmResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateFarmResponse: Could not create message: ' + e.message)
			}
		},
		
		msgCreateFarm({ value }: msgCreateFarmParams): EncodeObject {
			try {
				return { typeUrl: "/resource.resource.MsgCreateFarm", value: MsgCreateFarm.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCreateFarm: Could not create message: ' + e.message)
			}
		},
		
		params({ value }: paramsParams): EncodeObject {
			try {
				return { typeUrl: "/resource.resource.Params", value: Params.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:Params: Could not create message: ' + e.message)
			}
		},
		
		queryAllFarmRequest({ value }: queryAllFarmRequestParams): EncodeObject {
			try {
				return { typeUrl: "/resource.resource.QueryAllFarmRequest", value: QueryAllFarmRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryAllFarmRequest: Could not create message: ' + e.message)
			}
		},
		
		msgUpdateParams({ value }: msgUpdateParamsParams): EncodeObject {
			try {
				return { typeUrl: "/resource.resource.MsgUpdateParams", value: MsgUpdateParams.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateParams: Could not create message: ' + e.message)
			}
		},
		
		msgDeleteFarm({ value }: msgDeleteFarmParams): EncodeObject {
			try {
				return { typeUrl: "/resource.resource.MsgDeleteFarm", value: MsgDeleteFarm.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgDeleteFarm: Could not create message: ' + e.message)
			}
		},
		
		queryParamsRequest({ value }: queryParamsRequestParams): EncodeObject {
			try {
				return { typeUrl: "/resource.resource.QueryParamsRequest", value: QueryParamsRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryParamsRequest: Could not create message: ' + e.message)
			}
		},
		
		queryParamsResponse({ value }: queryParamsResponseParams): EncodeObject {
			try {
				return { typeUrl: "/resource.resource.QueryParamsResponse", value: QueryParamsResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryParamsResponse: Could not create message: ' + e.message)
			}
		},
		
		queryGetFarmResponse({ value }: queryGetFarmResponseParams): EncodeObject {
			try {
				return { typeUrl: "/resource.resource.QueryGetFarmResponse", value: QueryGetFarmResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetFarmResponse: Could not create message: ' + e.message)
			}
		},
		
		msgDeleteFarmResponse({ value }: msgDeleteFarmResponseParams): EncodeObject {
			try {
				return { typeUrl: "/resource.resource.MsgDeleteFarmResponse", value: MsgDeleteFarmResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgDeleteFarmResponse: Could not create message: ' + e.message)
			}
		},
		
		msgUpdateFarm({ value }: msgUpdateFarmParams): EncodeObject {
			try {
				return { typeUrl: "/resource.resource.MsgUpdateFarm", value: MsgUpdateFarm.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateFarm: Could not create message: ' + e.message)
			}
		},
		
		farm({ value }: farmParams): EncodeObject {
			try {
				return { typeUrl: "/resource.resource.Farm", value: Farm.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:Farm: Could not create message: ' + e.message)
			}
		},
		
		genesisState({ value }: genesisStateParams): EncodeObject {
			try {
				return { typeUrl: "/resource.resource.GenesisState", value: GenesisState.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:GenesisState: Could not create message: ' + e.message)
			}
		},
		
		queryGetFarmRequest({ value }: queryGetFarmRequestParams): EncodeObject {
			try {
				return { typeUrl: "/resource.resource.QueryGetFarmRequest", value: QueryGetFarmRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetFarmRequest: Could not create message: ' + e.message)
			}
		},
		
		msgUpdateParamsResponse({ value }: msgUpdateParamsResponseParams): EncodeObject {
			try {
				return { typeUrl: "/resource.resource.MsgUpdateParamsResponse", value: MsgUpdateParamsResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateParamsResponse: Could not create message: ' + e.message)
			}
		},
		
		msgCreateFarmResponse({ value }: msgCreateFarmResponseParams): EncodeObject {
			try {
				return { typeUrl: "/resource.resource.MsgCreateFarmResponse", value: MsgCreateFarmResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCreateFarmResponse: Could not create message: ' + e.message)
			}
		},
		
	}
};

interface QueryClientOptions {
  addr: string
}

export const queryClient = ({ addr: addr }: QueryClientOptions = { addr: "http://localhost:1317" }) => {
  return new Api({ baseURL: addr });
};

class SDKModule {
	public query: ReturnType<typeof queryClient>;
	public tx: ReturnType<typeof txClient>;
	public structure: Record<string,unknown>;
	public registry: Array<[string, GeneratedType]> = [];

	constructor(client: IgniteClient) {		
	
		this.query = queryClient({ addr: client.env.apiURL });		
		this.updateTX(client);
		this.structure =  {
						
		};
		client.on('signer-changed',(signer) => {			
		 this.updateTX(client);
		})
	}
	updateTX(client: IgniteClient) {
    const methods = txClient({
        signer: client.signer,
        addr: client.env.rpcURL,
        prefix: client.env.prefix ?? "cosmos",
    })
	
    this.tx = methods;
    for (let m in methods) {
        this.tx[m] = methods[m].bind(this.tx);
    }
	}
};

const IgntModule = (test: IgniteClient) => {
	return {
		module: {
			ResourceResource: new SDKModule(test)
		},
		registry: msgTypes
  }
}
export default IgntModule;